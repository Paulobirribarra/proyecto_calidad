"""
Comando para inicializar el sistema de seguridad de reservas.

Este comando crea las reglas de seguridad por defecto y
configura el sistema de prevenci√≥n de abuso de reservas.
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from core.reservation_security import initialize_default_security_rules, SecurityManager
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Inicializa el sistema de seguridad de reservas con reglas por defecto'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forzar la recreaci√≥n de reglas existentes',
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Mostrar informaci√≥n detallada',
        )

    def handle(self, *args, **options):
        force = options['force']
        verbose = options['verbose']
        
        self.stdout.write(
            self.style.SUCCESS('Inicializando sistema de seguridad de reservas...')
        )
        
        try:
            with transaction.atomic():
                # Inicializar reglas por defecto
                initialize_default_security_rules()
                
                if verbose:
                    # Mostrar reglas creadas
                    from core.reservation_security import ReservationSecurityRule
                    rules = ReservationSecurityRule.objects.all()
                    
                    self.stdout.write("\nReglas de seguridad configuradas:")
                    self.stdout.write("-" * 50)
                    
                    for rule in rules:
                        self.stdout.write(f"\nRol: {rule.get_role_display()}")
                        self.stdout.write(f"  - Reservas por hora: {rule.max_reservations_per_hour}")
                        self.stdout.write(f"  - Reservas por d√≠a: {rule.max_reservations_per_day}")
                        self.stdout.write(f"  - Reservas por semana: {rule.max_reservations_per_week}")
                        self.stdout.write(f"  - Horas por d√≠a: {rule.max_total_hours_per_day}")
                        self.stdout.write(f"  - Horas por semana: {rule.max_total_hours_per_week}")
                        self.stdout.write(f"  - Reservas simult√°neas: {rule.max_concurrent_reservations}")
                        self.stdout.write(f"  - D√≠as de anticipaci√≥n: {rule.max_advance_days}")
                        self.stdout.write(f"  - Duraci√≥n de bloqueo: {rule.block_duration_minutes} min")
                        self.stdout.write(f"  - Detecci√≥n de patrones: {'S√≠' if rule.enable_pattern_detection else 'No'}")
                        self.stdout.write(f"  - Activa: {'S√≠' if rule.is_active else 'No'}")
                
                self.stdout.write(
                    self.style.SUCCESS(
                        '\n‚úÖ Sistema de seguridad de reservas inicializado correctamente'
                    )
                )
                
                # Mostrar informaci√≥n adicional
                self.stdout.write("\n" + "="*60)
                self.stdout.write("INFORMACI√ìN DEL SISTEMA DE SEGURIDAD")
                self.stdout.write("="*60)
                
                self.stdout.write("""
üõ°Ô∏è  FUNCIONALIDADES IMPLEMENTADAS:

1. L√çMITES POR ROL DE USUARIO:
   - Estudiante: L√≠mites restrictivos para uso normal
   - Profesor: L√≠mites moderados para uso acad√©mico
   - Admin: L√≠mites altos para administraci√≥n
   - Default: L√≠mites b√°sicos para usuarios sin rol espec√≠fico

2. TIPOS DE L√çMITES:
   - Reservas por hora/d√≠a/semana
   - Horas totales reservadas por d√≠a/semana
   - Reservas simult√°neas activas
   - D√≠as m√°ximos de anticipaci√≥n

3. SEGURIDAD AVANZADA:
   - Detecci√≥n de patrones abusivos
   - Bloqueo temporal autom√°tico
   - Rate limiting por IP
   - Logging detallado de acciones

4. MONITOREO:
   - Logs de todas las acciones de reserva
   - Detecci√≥n de comportamiento sospechoso
   - Alertas autom√°ticas a administradores
   - An√°lisis de patrones de uso

5. CONFIGURACI√ìN:
   - Reglas editables desde el admin de Django
   - Umbrales de advertencia configurables
   - Duraci√≥n de bloqueos personalizable
   - Activaci√≥n/desactivaci√≥n por rol
                """)
                
                self.stdout.write("="*60)
                self.stdout.write("PR√ìXIMOS PASOS:")
                self.stdout.write("="*60)
                
                self.stdout.write("""
1. Agregar middleware a settings.py:
   MIDDLEWARE = [
       ...
       'core.reservation_security_middleware.ReservationSecurityMiddleware',
       'core.reservation_security_middleware.RateLimitMiddleware',
       ...
   ]

2. Configurar cache para rate limiting:
   CACHES = {
       'default': {
           'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
       }
   }

3. Ejecutar migraciones:
   python manage.py makemigrations
   python manage.py migrate

4. Configurar reglas desde el admin:
   - Ir a Admin > Core > Reglas de Seguridad de Reservas
   - Ajustar l√≠mites seg√∫n las necesidades
   - Revisar logs en Admin > Core > Logs de Uso de Reservas

5. Monitorear el sistema:
   - Revisar logs regularmente
   - Ajustar umbrales seg√∫n el uso real
   - Configurar notificaciones por email
                """)
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error al inicializar sistema de seguridad: {e}')
            )
            logger.error(f"Error en comando init_reservation_security: {e}", exc_info=True)
            raise
