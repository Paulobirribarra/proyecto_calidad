#!/usr/bin/env python
"""
Script para poblar m√°s rese√±as en el sistema.
"""

import os
import sys
import django
from django.conf import settings

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proyecto_calidad.settings')
django.setup()

from rooms.models import Room, Reservation, Review
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import datetime, timedelta
import random

def poblar_rese√±as():
    """Pobla m√°s rese√±as en el sistema."""
    print("üîÑ Poblando m√°s rese√±as...")
    
    # Verificar estado actual
    reservas_totales = Reservation.objects.all().count()
    rese√±as_existentes = Review.objects.all().count()
    
    print(f"üìä Estado actual:")
    print(f"   - Total reservas: {reservas_totales}")
    print(f"   - Total rese√±as: {rese√±as_existentes}")
    
    # Obtener reservas pasadas que podr√≠an estar completadas
    now = timezone.now()
    reservas_pasadas = Reservation.objects.filter(
        end_time__lt=now,
        status__in=['confirmed', 'in_progress']
    )[:20]  # Tomar las primeras 20
    
    print(f"   - Reservas pasadas que pueden completarse: {reservas_pasadas.count()}")
    
    # Completar las reservas pasadas
    for reserva in reservas_pasadas:
        reserva.status = 'completed'
        reserva.save()
    
    print(f"‚úÖ Se marcaron {reservas_pasadas.count()} reservas como completadas")
    
    # Obtener reservas completadas sin rese√±as
    reservas_sin_rese√±a = Reservation.objects.filter(
        status='completed'
    ).exclude(review__isnull=False)[:15]  # Crear rese√±as para las primeras 15
    
    print(f"üìù Creando rese√±as para {reservas_sin_rese√±a.count()} reservas...")
    
    # Comentarios de ejemplo por rating
    comentarios_por_rating = {
        5: [
            "Excelente sala, muy limpia y con buen equipamiento.",
            "Perfecta para estudiar, ambiente muy tranquilo.",
            "Todo funcion√≥ perfecto, la recomiendo totalmente.",
            "Instalaciones impecables y muy c√≥modas.",
            "La mejor sala que he usado, 10/10.",
            "Perfecta ubicaci√≥n y excelente mantenimiento.",
            "Super√≥ mis expectativas, volver√© sin dudas."
        ],
        4: [
            "Muy buena sala, solo le falta un poco m√°s de iluminaci√≥n.",
            "Excelente en general, peque√±os detalles por mejorar.",
            "Muy c√≥moda y funcional, casi perfecta.",
            "Buena experiencia, equipamiento en buen estado.",
            "Recomendable, ambiente agradable para estudiar.",
            "Muy satisfecho con la reserva, volver√≠a.",
            "Buena calidad, solo algunos ruidos del exterior."
        ],
        3: [
            "Sala correcta, cumple su funci√≥n b√°sica.",
            "Est√° bien, pero podr√≠a mejorarse la limpieza.",
            "Funcional pero nada excepcional.",
            "Aceptable para el uso que le di.",
            "Regular, hay salas mejores disponibles.",
            "Cumple lo m√≠nimo necesario.",
            "No est√° mal, pero esperaba algo mejor."
        ],
        2: [
            "Un poco ruidosa por estar cerca del pasillo.",
            "Equipamiento algo desactualizado.",
            "Necesita mejor mantenimiento.",
            "La limpieza podr√≠a mejorar considerablemente.",
            "Varias cosas no funcionaban correctamente.",
            "Decepcionante comparado con otras salas.",
            "Muchas distracciones por el ruido externo."
        ],
        1: [
            "Muy decepcionante, equipamiento en mal estado.",
            "Demasiado ruidosa, imposible concentrarse.",
            "P√©simas condiciones de limpieza.",
            "No recomiendo esta sala para nada.",
            "Experiencia muy negativa, buscar√© otras opciones.",
            "Completamente insatisfecho con el servicio.",
            "Condiciones inaceptables para estudiar."
        ]
    }
    
    tipos_comentario_por_rating = {
        5: 'positive',
        4: 'positive', 
        3: 'neutral',
        2: 'suggestion',
        1: 'problem'
    }
    
    rese√±as_creadas = 0
    
    for reserva in reservas_sin_rese√±a:
        try:
            # Generar calificaci√≥n con distribuci√≥n realista (m√°s 4s y 5s)
            rating_weights = [1, 2, 3, 6, 8]  # M√°s probabilidad de ratings altos
            rating = random.choices([1, 2, 3, 4, 5], weights=rating_weights)[0]
            
            # Seleccionar comentario apropiado
            comentario = random.choice(comentarios_por_rating[rating])
            tipo_comentario = tipos_comentario_por_rating[rating]
            
            # Generar calificaciones espec√≠ficas (pueden variar ¬±1 del rating general)
            cleanliness = max(1, min(5, rating + random.randint(-1, 1)))
            equipment = max(1, min(5, rating + random.randint(-1, 1)))
            comfort = max(1, min(5, rating + random.randint(-1, 1)))
            
            # Crear la rese√±a
            review = Review.objects.create(
                reservation=reserva,
                rating=rating,
                cleanliness_rating=cleanliness,
                equipment_rating=equipment,
                comfort_rating=comfort,
                comment=comentario,
                comment_type=tipo_comentario
            )
            
            rese√±as_creadas += 1
            print(f"   ‚úÖ Rese√±a creada: {reserva.room.name} - {rating}‚òÖ por {reserva.user.username}")
            
        except Exception as e:
            print(f"   ‚ùå Error creando rese√±a para reserva {reserva.id}: {e}")
    
    print(f"\nüéâ Proceso completado:")
    print(f"   - Rese√±as creadas: {rese√±as_creadas}")
    print(f"   - Total rese√±as ahora: {Review.objects.count()}")
    
    # Mostrar estad√≠sticas por sala
    print(f"\nüìä Estad√≠sticas por sala:")
    for room in Room.objects.all()[:10]:  # Mostrar solo las primeras 10
        total_reviews = Review.objects.filter(reservation__room=room).count()
        if total_reviews > 0:
            avg_rating = Review.objects.filter(reservation__room=room).aggregate(
                avg=models.Avg('rating')
            )['avg']
            print(f"   - {room.name}: {total_reviews} rese√±as, promedio {avg_rating:.1f}‚òÖ")

if __name__ == "__main__":
    from django.db import models
    poblar_rese√±as()
