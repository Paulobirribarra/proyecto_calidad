#!/usr/bin/env python3
"""
Script Simplificado de Evaluaci√≥n de Accesibilidad WCAG 2.1
Sistema de Reserva de Salas

Este script analiza los templates de Django para verificar
elementos b√°sicos de accesibilidad.
"""

import os
import sys

class AccessibilityChecker:
    def __init__(self):
        self.issues = []
        self.warnings = []
        self.passes = []
        
    def log_issue(self, page, issue_type, description):
        """Registra un problema de accesibilidad"""
        self.issues.append({
            'page': page,
            'type': issue_type,
            'description': description,
            'severity': 'ERROR'
        })
    
    def log_warning(self, page, issue_type, description):
        """Registra una advertencia de accesibilidad"""
        self.warnings.append({
            'page': page,
            'type': issue_type,
            'description': description,
            'severity': 'WARNING'
        })
    
    def log_pass(self, page, check_type, description):
        """Registra una verificaci√≥n exitosa"""
        self.passes.append({
            'page': page,
            'type': check_type,
            'description': description,
            'severity': 'PASS'
        })
    
    def analyze_template(self, content, page_name):
        """Analiza un template de Django para verificaciones b√°sicas"""
        
        # Verificar elementos cr√≠ticos de accesibilidad
        if 'aria-hidden="true"' in content:
            count = content.count('aria-hidden="true"')
            self.log_pass(page_name, 'ARIA_HIDDEN', f'{count} √≠conos decorativos con aria-hidden')
        else:
            self.log_warning(page_name, 'ARIA_HIDDEN', 'No se encontraron √≠conos con aria-hidden')
        
        if 'skip-link' in content:
            self.log_pass(page_name, 'SKIP_LINKS', 'Skip links implementados')
        else:
            self.log_issue(page_name, 'SKIP_LINKS', 'Skip links no encontrados')
        
        if 'aria-label=' in content:
            count = content.count('aria-label=')
            self.log_pass(page_name, 'ARIA_LABELS', f'{count} etiquetas ARIA encontradas')
        else:
            self.log_warning(page_name, 'ARIA_LABELS', 'Pocas etiquetas ARIA encontradas')
        
        if 'role=' in content:
            count = content.count('role=')
            self.log_pass(page_name, 'ARIA_ROLES', f'{count} roles ARIA encontrados')
        else:
            self.log_warning(page_name, 'ARIA_ROLES', 'Roles ARIA no encontrados')
        
        # Verificar estructura sem√°ntica
        semantic_elements = ['<nav', '<main', '<section', '<header', '<footer', '<article']
        found_semantic = [elem for elem in semantic_elements if elem in content]
        
        if found_semantic:
            self.log_pass(page_name, 'SEMANTIC_HTML', f'Elementos sem√°nticos: {", ".join(found_semantic)}')
        else:
            self.log_warning(page_name, 'SEMANTIC_HTML', 'Pocos elementos HTML5 sem√°nticos')
        
        # Verificar formularios
        if '<form' in content:
            if 'aria-required' in content or 'required' in content:
                self.log_pass(page_name, 'FORM_VALIDATION', 'Campos requeridos marcados')
            else:
                self.log_warning(page_name, 'FORM_VALIDATION', 'Campos requeridos sin marcar')
            
            if 'form-label' in content or 'label for=' in content:
                self.log_pass(page_name, 'FORM_LABELS', 'Etiquetas de formulario encontradas')
            else:
                self.log_issue(page_name, 'FORM_LABELS', 'Etiquetas de formulario faltantes')
        
        # Verificar breadcrumbs
        if 'breadcrumb' in content:
            if 'aria-label="breadcrumb"' in content:
                self.log_pass(page_name, 'BREADCRUMBS', 'Breadcrumbs accesibles')
            else:
                self.log_warning(page_name, 'BREADCRUMBS', 'Breadcrumbs sin aria-label')
        
        # Verificar botones
        if '<button' in content:
            if 'aria-label' in content:
                self.log_pass(page_name, 'BUTTON_LABELS', 'Botones con etiquetas ARIA')
            else:
                self.log_warning(page_name, 'BUTTON_LABELS', 'Algunos botones podr√≠an necesitar aria-label')
        
        # Verificar contraste
        contrast_issues = 0
        if 'text-muted' in content:
            contrast_issues += content.count('text-muted')
        if contrast_issues > 0:
            self.log_warning(page_name, 'COLOR_CONTRAST', f'{contrast_issues} elementos con texto gris - verificar contraste')
        
        # Verificar idioma
        if 'lang="es"' in content or 'extends' in content:
            self.log_pass(page_name, 'LANGUAGE', 'Idioma declarado o heredado')
        else:
            self.log_issue(page_name, 'LANGUAGE', 'Idioma no declarado')
        
        # Verificar navegaci√≥n
        if 'navbar' in content and 'role="navigation"' in content:
            self.log_pass(page_name, 'NAVIGATION', 'Navegaci√≥n con role correcto')
        elif 'navbar' in content:
            self.log_warning(page_name, 'NAVIGATION', 'Navegaci√≥n sin role="navigation"')
        
        # Verificar im√°genes
        if '<img' in content:
            if 'alt=' in content:
                self.log_pass(page_name, 'IMG_ALT', 'Im√°genes con atributo alt')
            else:
                self.log_issue(page_name, 'IMG_ALT', 'Im√°genes sin atributo alt')
        
        # Verificar modales
        if 'modal' in content:
            if 'aria-labelledby' in content or 'aria-describedby' in content:
                self.log_pass(page_name, 'MODALS', 'Modales con etiquetas ARIA')
            else:
                self.log_warning(page_name, 'MODALS', 'Modales sin aria-labelledby/describedby')
    
    def check_template_file(self, file_path, page_name):
        """Verifica un archivo de template espec√≠fico"""
        try:
            print(f"üìÑ Analizando: {page_name} ({file_path})")
            
            if not os.path.exists(file_path):
                self.log_warning(page_name, 'FILE_NOT_FOUND', f'Archivo no encontrado: {file_path}')
                return
            
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.analyze_template(content, page_name)
            
        except Exception as e:
            self.log_issue(page_name, 'EXCEPTION', f'Error al analizar: {str(e)}')
    
    def run_all_checks(self):
        """Ejecuta todas las verificaciones de accesibilidad"""
        print("üîç Iniciando evaluaci√≥n de accesibilidad WCAG 2.1")
        print("üìä An√°lisis est√°tico de templates Django")
        print("=" * 60)
        
        # Directorio base de templates
        templates_dir = os.path.join(os.path.dirname(__file__), '..', 'templates')
        
        # Templates a verificar
        templates_to_check = [
            ('base.html', 'Template Base'),
            ('rooms/room_list.html', 'Lista de Salas'),
            ('rooms/room_detail.html', 'Detalle de Sala'),
            ('rooms/room_reserve.html', 'Reservar Sala'),
            ('rooms/reservation_list.html', 'Mis Reservas'),
            ('rooms/room_review.html', 'Calificar Sala'),
            ('usuarios/login.html', 'Inicio de Sesi√≥n'),
            ('usuarios/register.html', 'Registro'),
            ('usuarios/profile.html', 'Perfil de Usuario'),
            ('errors/404.html', 'P√°gina de Error 404'),
        ]
        
        for template_path, name in templates_to_check:
            full_path = os.path.join(templates_dir, template_path)
            self.check_template_file(full_path, name)
        
        self.print_report()
    
    def print_report(self):
        """Imprime el reporte de accesibilidad"""
        print("\n" + "=" * 60)
        print("üìä REPORTE DE ACCESIBILIDAD WCAG 2.1")
        print("=" * 60)
        
        # Resumen
        total_issues = len(self.issues)
        total_warnings = len(self.warnings)
        total_passes = len(self.passes)
        
        print(f"\nüìà RESUMEN:")
        print(f"   ‚úÖ Verificaciones exitosas: {total_passes}")
        print(f"   ‚ö†Ô∏è  Advertencias: {total_warnings}")
        print(f"   ‚ùå Problemas cr√≠ticos: {total_issues}")
        
        # Estado general
        conformity_score = (total_passes / (total_passes + total_warnings + total_issues)) * 100 if (total_passes + total_warnings + total_issues) > 0 else 0
        
        print(f"\nüìä PUNTUACI√ìN DE CONFORMIDAD: {conformity_score:.1f}%")
        
        if conformity_score >= 90:
            print("üéâ ESTADO: EXCELENTE - Alta conformidad con WCAG 2.1")
        elif conformity_score >= 70:
            print("‚úÖ ESTADO: BUENO - Conformidad moderada, mejoras menores necesarias")
        elif conformity_score >= 50:
            print("‚ö†Ô∏è  ESTADO: NECESITA MEJORAS - Problemas moderados")
        else:
            print("‚ùå ESTADO: NO CUMPLE - Problemas cr√≠ticos m√∫ltiples")
        
        # An√°lisis por categor√≠as
        categories = {}
        for item in self.issues + self.warnings + self.passes:
            cat = item['type']
            if cat not in categories:
                categories[cat] = {'pass': 0, 'warning': 0, 'error': 0}
            
            if item['severity'] == 'PASS':
                categories[cat]['pass'] += 1
            elif item['severity'] == 'WARNING':
                categories[cat]['warning'] += 1
            else:
                categories[cat]['error'] += 1
        
        print(f"\nüìã AN√ÅLISIS POR CATEGOR√çAS:")
        for cat, counts in sorted(categories.items()):
            total_cat = sum(counts.values())
            success_rate = (counts['pass'] / total_cat) * 100 if total_cat > 0 else 0
            status = "‚úÖ" if success_rate >= 80 else "‚ö†Ô∏è" if success_rate >= 50 else "‚ùå"
            print(f"   {status} {cat}: {success_rate:.0f}% ({counts['pass']}‚úÖ {counts['warning']}‚ö†Ô∏è {counts['error']}‚ùå)")
        
        # Problemas cr√≠ticos
        if self.issues:
            print(f"\n‚ùå PROBLEMAS CR√çTICOS QUE REQUIEREN ATENCI√ìN INMEDIATA:")
            for issue in self.issues[:10]:  # Mostrar solo los primeros 10
                print(f"   ‚Ä¢ {issue['page']}: {issue['description']}")
            
            if len(self.issues) > 10:
                print(f"   ... y {len(self.issues) - 10} problemas m√°s")
        
        # Advertencias importantes
        if self.warnings:
            print(f"\n‚ö†Ô∏è  ADVERTENCIAS PRINCIPALES:")
            warning_counts = {}
            for warning in self.warnings:
                desc = warning['description']
                warning_counts[desc] = warning_counts.get(desc, 0) + 1
            
            for desc, count in sorted(warning_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"   ‚Ä¢ {desc} ({count} ocurrencias)")
        
        # Fortalezas
        if self.passes:
            print(f"\n‚úÖ FORTALEZAS DEL SISTEMA:")
            pass_counts = {}
            for pass_item in self.passes:
                desc = pass_item['description']
                pass_counts[desc] = pass_counts.get(desc, 0) + 1
            
            for desc, count in sorted(pass_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"   ‚Ä¢ {desc} ({count} implementaciones)")
        
        print(f"\nüí° RECOMENDACIONES PRIORITARIAS:")
        print(f"   1. üö® Revisar y corregir problemas cr√≠ticos listados arriba")
        print(f"   2. üìñ Consultar EVALUACION_ACCESIBILIDAD_WCAG.md para detalles")
        print(f"   3. üõ†Ô∏è  Implementar mejoras de Fase 1 (etiquetas, roles ARIA)")
        print(f"   4. üé® Verificar contraste de colores con herramientas especializadas")
        print(f"   5. üîä Probar con lectores de pantalla (NVDA, JAWS, VoiceOver)")
        print(f"   6. ü§ñ Usar herramientas automatizadas: axe-core, Pa11y, Lighthouse")
        
        print(f"\nüéØ PR√ìXIMOS PASOS:")
        if total_issues > 0:
            print(f"   ‚Ä¢ Prioridad ALTA: Corregir {total_issues} problemas cr√≠ticos")
        if total_warnings > 5:
            print(f"   ‚Ä¢ Prioridad MEDIA: Revisar {total_warnings} advertencias")
        print(f"   ‚Ä¢ Implementar plan de mejoras por fases")
        print(f"   ‚Ä¢ Establecer proceso de validaci√≥n continua")
        
        print("\n" + "=" * 60)
        print("üìã NOTA: Esta es una evaluaci√≥n b√°sica automatizada.")
        print("üîç Se recomienda complementar con:")
        print("   - Pruebas manuales con teclado")
        print("   - Evaluaci√≥n con lectores de pantalla")
        print("   - Herramientas especializadas de accesibilidad")
        print("   - Revisi√≥n por expertos en UX accesible")

def main():
    """Funci√≥n principal"""
    print("üöÄ Sistema de Evaluaci√≥n de Accesibilidad WCAG 2.1")
    print("üè¢ Sistema de Reserva de Salas")
    print()
    
    checker = AccessibilityChecker()
    checker.run_all_checks()

if __name__ == '__main__':
    main()
